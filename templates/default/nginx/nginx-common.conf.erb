set $skip_cache 0;
    
# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {
	set $skip_cache 1;
}   
if ($query_string != "") {
	set $skip_cache 1;
}

location / {
    index index.html index.php;
    try_files $uri $uri/ /index.php?$args;
}

# Specify a charset
charset utf-8;

# this prevents hidden files (beginning with a period) from being served
location ~ /\. {
	access_log off;
	log_not_found off;
	deny all;
}

location ~ \.php$ {

	##
	# Fastcgi cache
	##
	set $skip_cache 1;
    if ($cache_uri != "null cache") {
    	add_header X-Cache-Debug "$cache_uri $cookie_nocache $arg_nocache$arg_comment $http_pragma $http_authorization";
		set $skip_cache 0;
	}
	
	fastcgi_cache_bypass $skip_cache;
    fastcgi_no_cache $skip_cache;

	fastcgi_cache <%= node['nginx']['fastcgi_cache_keys_zone'] %>;
	fastcgi_cache_valid any <%= node['nginx']['fastcgi_cache_valid'] %>;
	
	location ~ /purge(/.*) {
	    fastcgi_cache_purge <%= node['nginx']['fastcgi_cache_keys_zone'] %> "$scheme$request_method$host$1";
	}

    # Try the files specified in order. In our case, try the requested URI and if
    # that fails, try (successfully) to pass a 404 error.
    try_files      $uri = 404;

    # Include the fastcgi_params defaults provided by nginx
    include        /etc/nginx/fastcgi_params;

    # The amount of time for upstream to wait for a fastcgi process to send data.
    # We keep this *extremely* high so that one can be lazy when remote debugging.
	fastcgi_read_timeout 3600s;

    # Buffer size for reading the header of the backend FastCGI process.
    # This defaults to the value of a single fastcgi_buffers, so does not
    # need to be specified in our case, but it's good to be explicit.
	fastcgi_buffer_size 128k;

    # The number and size of the buffers into which the reply from the FastCGI
    # process in the backend is read.
    #
    # 4 buffers at 128k means that any reply by FastCGI greater than 512k goes
    # to disk and replies under 512k are handled directly in memory.
    fastcgi_buffers 4 128k;

    # SCRIPT_FILENAME is a required parameter for things to work properly,
    # but was missing in the default fastcgi_params on upgrade to nginx 1.4.
    # We define it here to be sure that it exists.
    fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

    # Use the upstream for php5-fpm that we defined in nginx.conf
    fastcgi_pass   php;

    # And get to serving the file!
    fastcgi_index  index.php;
}

location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
	access_log off;	log_not_found off; expires max;
}

location = /robots.txt {
	access_log off; log_not_found off;
}

location = /favicon.ico {
	access_log off; log_not_found off; expires 30d;
}

location ~ /\. {
	access_log off; log_not_found off; deny all;
}

location ~ ~$ {
	access_log off; log_not_found off; deny all;
}

location ~ /\.git {
	access_log off; log_not_found off; deny all;
}
